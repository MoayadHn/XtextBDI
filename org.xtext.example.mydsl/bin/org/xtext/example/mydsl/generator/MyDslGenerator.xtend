/*
 * generated by Xtext
*/
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.example.mydsl.myDsl.Agent
import org.xtext.example.mydsl.myDsl.Belief
import org.xtext.example.mydsl.myDsl.Plan
import org.xtext.example.mydsl.myDsl.Event
import org.xtext.example.mydsl.myDsl.Goal
import org.eclipse.xtext.naming.IQualifiedNameProvider

import com.google.inject.Inject

/* 
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
*/
abstract class MyDslGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
// Creating the agent XML model
  for(e: resource.allContents.toIterable.filter(Agent)) {
    fsa.generateFile(
      e.name + ".xml",
      e.compileAgent)
  		}
	}
	
	def compileAgent(Agent e) '''
<Agent>
      «FOR b: e.belief»
      	«FOR bs: b.beliefSet»   
      	<belief name='«bs.name»' beliefGoal='«bs.beliefGoal»' beliefValidate='«bs.beliefValidate»' fact='«bs.fact»'/>
        «ENDFOR»
      «ENDFOR» 
      «FOR plans: e.plan»
        «FOR plan: plans.plans»
        <plan name='«plan.name»' priorityValue=«plan.priorityValue» planEvent='«plan.trigger»' code='«plan.body»'/>
       	«ENDFOR»
      «ENDFOR»     
       «FOR goals:e.goal »
        «FOR goal: goals.goals»
        <goal name='«goal.name»' goalType='«goal.class.simpleName»' goalPlan='«goal.goalplan»' condition='«goal.condition»'/>
       	«ENDFOR»
      «ENDFOR»
       «FOR events:e.event »
        «FOR event: events.events»
        <event name='«event.name»' code ='«event.code»'/>
       	«ENDFOR»
      «ENDFOR»      

</Agent>
'''

}
}
